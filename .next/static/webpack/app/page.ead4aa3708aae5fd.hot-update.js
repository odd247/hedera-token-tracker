"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/hedera.ts":
/*!*****************************!*\
  !*** ./src/utils/hedera.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccountInfo: function() { return /* binding */ getAccountInfo; },\n/* harmony export */   getTokenHolders: function() { return /* binding */ getTokenHolders; },\n/* harmony export */   getTokenInfo: function() { return /* binding */ getTokenInfo; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst BASE_URL = \"https://mainnet-public.mirrornode.hedera.com\";\nconst API_PATH = \"/api/v1\";\nfunction formatTokenId(tokenId) {\n    // Remove any spaces and convert to lowercase\n    tokenId = tokenId.trim().toLowerCase();\n    // If it's already in shard.realm.num format, return as is\n    if (tokenId.includes(\".\")) {\n        return tokenId;\n    }\n    // If it's just a number, convert to 0.0.number format\n    if (/^\\d+$/.test(tokenId)) {\n        return \"0.0.\".concat(tokenId);\n    }\n    return tokenId;\n}\nasync function getTokenInfo(tokenId) {\n    try {\n        const formattedTokenId = formatTokenId(tokenId);\n        const url = \"https://mainnet-public.mirrornode.hedera.com/api/v1/tokens/\".concat(formattedTokenId);\n        console.log(\"Fetching token info from:\", url);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url);\n        if (!response.data) {\n            throw new Error(\"Failed to fetch token info: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        console.log(\"Token info response:\", response.data);\n        // Convert decimals to number explicitly\n        return {\n            name: response.data.name,\n            symbol: response.data.symbol,\n            total_supply: response.data.total_supply,\n            decimals: Number(response.data.decimals)\n        };\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config, _error_response_data, _error_response3, _error_response4;\n        console.error(\"Error fetching token info:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw new Error(((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : (_error_response_data = _error_response3.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || ((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.statusText) || \"Error fetching token data\");\n    }\n}\nasync function getTokenHolders(tokenId) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    try {\n        var _firstResponse_data_links, _firstResponse_data_links1;\n        const formattedTokenId = formatTokenId(tokenId);\n        const tokenInfo = await getTokenInfo(formattedTokenId);\n        console.log(\"Token Info:\", {\n            name: tokenInfo.name,\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            total_supply: tokenInfo.total_supply\n        });\n        // Use a Map to ensure unique accounts\n        const holdersMap = new Map();\n        let hasMore = true;\n        // Get first page with maximum limit\n        const fetchPage = async function() {\n            let nextLink = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n            const url = nextLink ? \"\".concat(BASE_URL).concat(nextLink) : \"\".concat(BASE_URL).concat(API_PATH, \"/tokens/\").concat(formattedTokenId, \"/balances?limit=100\");\n            console.log(\"Fetching balances from:\", url);\n            return axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url);\n        };\n        // Fetch first page\n        const firstResponse = await fetchPage();\n        let holders = firstResponse.data.balances.filter((h)=>h.balance !== \"0\" && BigInt(h.balance) > 0);\n        holders.forEach((h)=>holdersMap.set(h.account, h));\n        hasMore = !!((_firstResponse_data_links = firstResponse.data.links) === null || _firstResponse_data_links === void 0 ? void 0 : _firstResponse_data_links.next);\n        let nextLink = (_firstResponse_data_links1 = firstResponse.data.links) === null || _firstResponse_data_links1 === void 0 ? void 0 : _firstResponse_data_links1.next;\n        // Fetch remaining pages\n        let pageCount = 1;\n        const maxPages = 200; // Increased to 200 pages to get more holders\n        while(hasMore && pageCount < maxPages && nextLink){\n            try {\n                var _response_data_links;\n                console.log(\"Fetching page \".concat(pageCount + 1, \" using next link\"));\n                const response = await fetchPage(nextLink);\n                holders = response.data.balances.filter((h)=>h.balance !== \"0\" && BigInt(h.balance) > 0);\n                if (holders.length > 0) {\n                    holders.forEach((h)=>holdersMap.set(h.account, h));\n                    console.log(\"Found \".concat(holders.length, \" holders on page \").concat(pageCount + 1, \" (total unique: \").concat(holdersMap.size, \")\"));\n                } else {\n                    hasMore = false;\n                }\n                nextLink = (_response_data_links = response.data.links) === null || _response_data_links === void 0 ? void 0 : _response_data_links.next;\n                hasMore = hasMore && !!nextLink;\n                pageCount++;\n                // Add a small delay to avoid rate limiting\n                await new Promise((resolve)=>setTimeout(resolve, 100));\n            } catch (error) {\n                console.error(\"Error fetching page \".concat(pageCount + 1, \":\"), error);\n                hasMore = false;\n            }\n        }\n        // Convert Map back to array\n        const allHolders = Array.from(holdersMap.values());\n        console.log(\"Total unique holders fetched: \".concat(allHolders.length, \" from \").concat(pageCount, \" pages\"));\n        const decimals = Number(tokenInfo.decimals);\n        const oneToken = BigInt(10 ** decimals);\n        const totalSupplyBigInt = BigInt(tokenInfo.total_supply);\n        // Sort holders by numeric balance value\n        console.log(\"Sorting holders...\");\n        const sortedHolders = allHolders.map((holder)=>({\n                ...holder,\n                numericBalance: BigInt(holder.balance)\n            })).sort((a, b)=>{\n            return a.numericBalance > b.numericBalance ? -1 : a.numericBalance < b.numericBalance ? 1 : 0;\n        }).slice(0, limit);\n        const formattedHolders = sortedHolders.map((holder)=>{\n            const percentage = Number(holder.numericBalance * BigInt(1000000) / totalSupplyBigInt) / 10000;\n            return {\n                account: holder.account,\n                balance: holder.balance,\n                percentage\n            };\n        });\n        // Log top 20 holders with formatted balances for verification\n        console.log(\"Top holders:\", formattedHolders.slice(0, 20).map((h)=>({\n                account: h.account,\n                balance: formatBalance(h.balance, decimals),\n                percentage: h.percentage.toFixed(4) + \"%\"\n            })));\n        const stats = {\n            totalAccounts: allHolders.length + (hasMore ? \"+\" : \"\"),\n            accountsAboveOne: allHolders.filter((holder)=>BigInt(holder.balance) >= oneToken).length\n        };\n        return {\n            holders: formattedHolders,\n            stats\n        };\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config;\n        console.error(\"Error fetching token holders:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw error;\n    }\n}\nasync function getAccountInfo(accountId) {\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(BASE_URL).concat(API_PATH, \"/accounts/\").concat(accountId));\n        return response.data;\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config;\n        console.error(\"Error fetching account info:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw error;\n    }\n}\n// Helper function to format raw balance with decimals\nfunction formatBalance(balance, decimals) {\n    try {\n        const balanceBN = BigInt(balance);\n        const divisor = BigInt(10 ** decimals);\n        const wholePart = balanceBN / divisor;\n        const fractionalPart = balanceBN % divisor;\n        let result = wholePart.toString();\n        if (fractionalPart > 0) {\n            let fractionalStr = fractionalPart.toString().padStart(decimals, \"0\");\n            // Keep all significant decimal places\n            while(fractionalStr.endsWith(\"0\")){\n                fractionalStr = fractionalStr.slice(0, -1);\n            }\n            if (fractionalStr.length > 0) {\n                result += \".\" + fractionalStr;\n            }\n        }\n        // Add thousand separators\n        const parts = result.split(\".\");\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return parts.join(\".\");\n    } catch (error) {\n        console.error(\"Error formatting balance:\", error);\n        return balance;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/hedera.ts\n"));

/***/ })

});