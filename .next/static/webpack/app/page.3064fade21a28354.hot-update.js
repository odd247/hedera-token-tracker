"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/hedera.ts":
/*!*****************************!*\
  !*** ./src/utils/hedera.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAccountInfo: function() { return /* binding */ getAccountInfo; },\n/* harmony export */   getTokenHolders: function() { return /* binding */ getTokenHolders; },\n/* harmony export */   getTokenInfo: function() { return /* binding */ getTokenInfo; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\nconst BASE_URL = \"https://mainnet-public.mirrornode.hedera.com\";\nconst API_PATH = \"/api/v1\";\nfunction formatTokenId(tokenId) {\n    // Remove any spaces and convert to lowercase\n    tokenId = tokenId.trim().toLowerCase();\n    // If it's already in shard.realm.num format, return as is\n    if (tokenId.includes(\".\")) {\n        return tokenId;\n    }\n    // If it's just a number, convert to 0.0.number format\n    if (/^\\d+$/.test(tokenId)) {\n        return \"0.0.\".concat(tokenId);\n    }\n    return tokenId;\n}\nasync function getTokenInfo(tokenId) {\n    try {\n        const formattedTokenId = formatTokenId(tokenId);\n        const url = \"\".concat(BASE_URL).concat(API_PATH, \"/tokens/\").concat(formattedTokenId);\n        console.log(\"Fetching token info from:\", url);\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url);\n        console.log(\"Token Info Response:\", response.data);\n        return response.data;\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config, _error_response_data, _error_response3, _error_response4;\n        console.error(\"Error fetching token info:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw new Error(((_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : (_error_response_data = _error_response3.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || ((_error_response4 = error.response) === null || _error_response4 === void 0 ? void 0 : _error_response4.statusText) || \"Error fetching token data\");\n    }\n}\nasync function getTokenHolders(tokenId) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    try {\n        var _firstResponse_data_links;\n        const formattedTokenId = formatTokenId(tokenId);\n        const tokenInfo = await getTokenInfo(formattedTokenId);\n        console.log(\"Token Info:\", {\n            name: tokenInfo.name,\n            symbol: tokenInfo.symbol,\n            decimals: tokenInfo.decimals,\n            total_supply: tokenInfo.total_supply\n        });\n        let allHolders = [];\n        let nextLink = null;\n        const url = \"\".concat(BASE_URL).concat(API_PATH, \"/tokens/\").concat(formattedTokenId, \"/balances\");\n        console.log(\"Fetching token balances from:\", url);\n        // Get first page with maximum limit\n        const firstResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(url, {\n            params: {\n                limit: 100\n            }\n        });\n        // Filter out zero balances\n        allHolders = firstResponse.data.balances.filter((h)=>h.balance !== \"0\" && BigInt(h.balance) > 0);\n        nextLink = (_firstResponse_data_links = firstResponse.data.links) === null || _firstResponse_data_links === void 0 ? void 0 : _firstResponse_data_links.next;\n        // Fetch all pages until we don't have a next link or reach 10 pages\n        let pageCount = 1;\n        while(nextLink && pageCount < 10){\n            var _nextResponse_data_links;\n            const nextUrl = \"\".concat(BASE_URL).concat(nextLink);\n            console.log(\"Fetching page \".concat(pageCount + 1, \" from \").concat(nextUrl, \"...\"));\n            const nextResponse = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(nextUrl);\n            const pageHolders = nextResponse.data.balances.filter((h)=>h.balance !== \"0\" && BigInt(h.balance) > 0);\n            allHolders = [\n                ...allHolders,\n                ...pageHolders\n            ];\n            nextLink = (_nextResponse_data_links = nextResponse.data.links) === null || _nextResponse_data_links === void 0 ? void 0 : _nextResponse_data_links.next;\n            pageCount++;\n        }\n        console.log(\"Total holders fetched: \".concat(allHolders.length));\n        const decimals = Number(tokenInfo.decimals);\n        const oneToken = BigInt(10 ** decimals);\n        const totalSupplyBigInt = BigInt(tokenInfo.total_supply);\n        // Sort holders by numeric balance value\n        const sortedHolders = allHolders.map((holder)=>({\n                ...holder,\n                numericBalance: BigInt(holder.balance)\n            })).sort((a, b)=>{\n            return a.numericBalance > b.numericBalance ? -1 : a.numericBalance < b.numericBalance ? 1 : 0;\n        }).slice(0, limit);\n        const formattedHolders = sortedHolders.map((holder)=>{\n            const percentage = Number(holder.numericBalance * BigInt(1000000) / totalSupplyBigInt) / 10000;\n            return {\n                account: holder.account,\n                balance: holder.balance,\n                percentage\n            };\n        });\n        // Log top 10 holders with formatted balances for verification\n        console.log(\"Top holders:\", formattedHolders.slice(0, 10).map((h)=>({\n                account: h.account,\n                balance: formatBalance(h.balance, decimals),\n                percentage: h.percentage.toFixed(4) + \"%\"\n            })));\n        const stats = {\n            totalAccounts: allHolders.length + (nextLink ? \"+\" : \"\"),\n            accountsAboveOne: allHolders.filter((holder)=>BigInt(holder.balance) >= oneToken).length\n        };\n        return {\n            holders: formattedHolders,\n            stats\n        };\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config;\n        console.error(\"Error fetching token holders:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw error;\n    }\n}\nasync function getAccountInfo(accountId) {\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"\".concat(BASE_URL).concat(API_PATH, \"/accounts/\").concat(accountId));\n        return response.data;\n    } catch (error) {\n        var _error_response, _error_response1, _error_response2, _error_config;\n        console.error(\"Error fetching account info:\", {\n            status: (_error_response = error.response) === null || _error_response === void 0 ? void 0 : _error_response.status,\n            statusText: (_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : _error_response1.statusText,\n            data: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.data,\n            url: (_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.url\n        });\n        throw error;\n    }\n}\n// Helper function to format raw balance with decimals\nfunction formatBalance(balance, decimals) {\n    try {\n        const balanceBN = BigInt(balance);\n        const divisor = BigInt(10 ** decimals);\n        const wholePart = balanceBN / divisor;\n        const fractionalPart = balanceBN % divisor;\n        let result = wholePart.toString();\n        if (fractionalPart > 0) {\n            let fractionalStr = fractionalPart.toString().padStart(decimals, \"0\");\n            // Keep all significant decimal places\n            while(fractionalStr.endsWith(\"0\")){\n                fractionalStr = fractionalStr.slice(0, -1);\n            }\n            if (fractionalStr.length > 0) {\n                result += \".\" + fractionalStr;\n            }\n        }\n        // Add thousand separators\n        const parts = result.split(\".\");\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        return parts.join(\".\");\n    } catch (error) {\n        console.error(\"Error formatting balance:\", error);\n        return balance;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzFDO1lBQ0EsSUFBSWtCLGNBQWM3QixNQUFNLEdBQUcsR0FBRztnQkFDNUIyQixVQUFVLE1BQU1FO1lBQ2xCO1FBQ0Y7UUFFQSwwQkFBMEI7UUFDMUIsTUFBTUcsUUFBUUwsT0FBT00sS0FBSyxDQUFDO1FBQzNCRCxLQUFLLENBQUMsRUFBRSxHQUFHQSxLQUFLLENBQUMsRUFBRSxDQUFDRSxPQUFPLENBQUMseUJBQXlCO1FBQ3JELE9BQU9GLE1BQU1HLElBQUksQ0FBQztJQUNwQixFQUFFLE9BQU8vRCxPQUFPO1FBQ2RMLFFBQVFLLEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU9vQjtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL3V0aWxzL2hlZGVyYS50cz82YTk5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmNvbnN0IEJBU0VfVVJMID0gJ2h0dHBzOi8vbWFpbm5ldC1wdWJsaWMubWlycm9ybm9kZS5oZWRlcmEuY29tJztcbmNvbnN0IEFQSV9QQVRIID0gJy9hcGkvdjEnO1xuXG5pbnRlcmZhY2UgVG9rZW5Ib2xkZXIge1xuICBhY2NvdW50OiBzdHJpbmc7XG4gIGJhbGFuY2U6IHN0cmluZztcbiAgcGVyY2VudGFnZTogbnVtYmVyO1xufVxuXG5pbnRlcmZhY2UgVG9rZW5Ib2xkZXJzUmVzcG9uc2Uge1xuICBob2xkZXJzOiBUb2tlbkhvbGRlcltdO1xuICBzdGF0czoge1xuICAgIHRvdGFsQWNjb3VudHM6IG51bWJlciB8IHN0cmluZztcbiAgICBhY2NvdW50c0Fib3ZlT25lOiBudW1iZXI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRva2VuSWQodG9rZW5JZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gUmVtb3ZlIGFueSBzcGFjZXMgYW5kIGNvbnZlcnQgdG8gbG93ZXJjYXNlXG4gIHRva2VuSWQgPSB0b2tlbklkLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICBcbiAgLy8gSWYgaXQncyBhbHJlYWR5IGluIHNoYXJkLnJlYWxtLm51bSBmb3JtYXQsIHJldHVybiBhcyBpc1xuICBpZiAodG9rZW5JZC5pbmNsdWRlcygnLicpKSB7XG4gICAgcmV0dXJuIHRva2VuSWQ7XG4gIH1cbiAgXG4gIC8vIElmIGl0J3MganVzdCBhIG51bWJlciwgY29udmVydCB0byAwLjAubnVtYmVyIGZvcm1hdFxuICBpZiAoL15cXGQrJC8udGVzdCh0b2tlbklkKSkge1xuICAgIHJldHVybiBgMC4wLiR7dG9rZW5JZH1gO1xuICB9XG4gIFxuICByZXR1cm4gdG9rZW5JZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRva2VuSW5mbyh0b2tlbklkOiBzdHJpbmcpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRUb2tlbklkID0gZm9ybWF0VG9rZW5JZCh0b2tlbklkKTtcbiAgICBjb25zdCB1cmwgPSBgJHtCQVNFX1VSTH0ke0FQSV9QQVRIfS90b2tlbnMvJHtmb3JtYXR0ZWRUb2tlbklkfWA7XG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHRva2VuIGluZm8gZnJvbTonLCB1cmwpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XG4gICAgY29uc29sZS5sb2coJ1Rva2VuIEluZm8gUmVzcG9uc2U6JywgcmVzcG9uc2UuZGF0YSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0b2tlbiBpbmZvOicsIHtcbiAgICAgIHN0YXR1czogZXJyb3IucmVzcG9uc2U/LnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXNUZXh0LFxuICAgICAgZGF0YTogZXJyb3IucmVzcG9uc2U/LmRhdGEsXG4gICAgICB1cmw6IGVycm9yLmNvbmZpZz8udXJsXG4gICAgfSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgZXJyb3IucmVzcG9uc2U/LmRhdGE/Lm1lc3NhZ2UgfHwgXG4gICAgICBlcnJvci5yZXNwb25zZT8uc3RhdHVzVGV4dCB8fCBcbiAgICAgICdFcnJvciBmZXRjaGluZyB0b2tlbiBkYXRhJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRva2VuSG9sZGVycyh0b2tlbklkOiBzdHJpbmcsIGxpbWl0OiBudW1iZXIgPSA1MCk6IFByb21pc2U8VG9rZW5Ib2xkZXJzUmVzcG9uc2U+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRUb2tlbklkID0gZm9ybWF0VG9rZW5JZCh0b2tlbklkKTtcbiAgICBjb25zdCB0b2tlbkluZm8gPSBhd2FpdCBnZXRUb2tlbkluZm8oZm9ybWF0dGVkVG9rZW5JZCk7XG4gICAgY29uc29sZS5sb2coJ1Rva2VuIEluZm86Jywge1xuICAgICAgbmFtZTogdG9rZW5JbmZvLm5hbWUsXG4gICAgICBzeW1ib2w6IHRva2VuSW5mby5zeW1ib2wsXG4gICAgICBkZWNpbWFsczogdG9rZW5JbmZvLmRlY2ltYWxzLFxuICAgICAgdG90YWxfc3VwcGx5OiB0b2tlbkluZm8udG90YWxfc3VwcGx5XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGFsbEhvbGRlcnM6IGFueVtdID0gW107XG4gICAgbGV0IG5leHRMaW5rID0gbnVsbDtcbiAgICBcbiAgICBjb25zdCB1cmwgPSBgJHtCQVNFX1VSTH0ke0FQSV9QQVRIfS90b2tlbnMvJHtmb3JtYXR0ZWRUb2tlbklkfS9iYWxhbmNlc2A7XG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIHRva2VuIGJhbGFuY2VzIGZyb206JywgdXJsKTtcbiAgICBcbiAgICAvLyBHZXQgZmlyc3QgcGFnZSB3aXRoIG1heGltdW0gbGltaXRcbiAgICBjb25zdCBmaXJzdFJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KHVybCwge1xuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGxpbWl0OiAxMDBcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICAvLyBGaWx0ZXIgb3V0IHplcm8gYmFsYW5jZXNcbiAgICBhbGxIb2xkZXJzID0gZmlyc3RSZXNwb25zZS5kYXRhLmJhbGFuY2VzLmZpbHRlcigoaDogYW55KSA9PiBoLmJhbGFuY2UgIT09ICcwJyAmJiBCaWdJbnQoaC5iYWxhbmNlKSA+IDApO1xuICAgIG5leHRMaW5rID0gZmlyc3RSZXNwb25zZS5kYXRhLmxpbmtzPy5uZXh0O1xuXG4gICAgLy8gRmV0Y2ggYWxsIHBhZ2VzIHVudGlsIHdlIGRvbid0IGhhdmUgYSBuZXh0IGxpbmsgb3IgcmVhY2ggMTAgcGFnZXNcbiAgICBsZXQgcGFnZUNvdW50ID0gMTtcbiAgICB3aGlsZSAobmV4dExpbmsgJiYgcGFnZUNvdW50IDwgMTApIHtcbiAgICAgIGNvbnN0IG5leHRVcmwgPSBgJHtCQVNFX1VSTH0ke25leHRMaW5rfWA7XG4gICAgICBjb25zb2xlLmxvZyhgRmV0Y2hpbmcgcGFnZSAke3BhZ2VDb3VudCArIDF9IGZyb20gJHtuZXh0VXJsfS4uLmApO1xuICAgICAgY29uc3QgbmV4dFJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KG5leHRVcmwpO1xuICAgICAgY29uc3QgcGFnZUhvbGRlcnMgPSBuZXh0UmVzcG9uc2UuZGF0YS5iYWxhbmNlcy5maWx0ZXIoKGg6IGFueSkgPT4gaC5iYWxhbmNlICE9PSAnMCcgJiYgQmlnSW50KGguYmFsYW5jZSkgPiAwKTtcbiAgICAgIGFsbEhvbGRlcnMgPSBbLi4uYWxsSG9sZGVycywgLi4ucGFnZUhvbGRlcnNdO1xuICAgICAgbmV4dExpbmsgPSBuZXh0UmVzcG9uc2UuZGF0YS5saW5rcz8ubmV4dDtcbiAgICAgIHBhZ2VDb3VudCsrO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGBUb3RhbCBob2xkZXJzIGZldGNoZWQ6ICR7YWxsSG9sZGVycy5sZW5ndGh9YCk7XG5cbiAgICBjb25zdCBkZWNpbWFscyA9IE51bWJlcih0b2tlbkluZm8uZGVjaW1hbHMpO1xuICAgIGNvbnN0IG9uZVRva2VuID0gQmlnSW50KDEwICoqIGRlY2ltYWxzKTtcbiAgICBjb25zdCB0b3RhbFN1cHBseUJpZ0ludCA9IEJpZ0ludCh0b2tlbkluZm8udG90YWxfc3VwcGx5KTtcblxuICAgIC8vIFNvcnQgaG9sZGVycyBieSBudW1lcmljIGJhbGFuY2UgdmFsdWVcbiAgICBjb25zdCBzb3J0ZWRIb2xkZXJzID0gYWxsSG9sZGVyc1xuICAgICAgLm1hcChob2xkZXIgPT4gKHtcbiAgICAgICAgLi4uaG9sZGVyLFxuICAgICAgICBudW1lcmljQmFsYW5jZTogQmlnSW50KGhvbGRlci5iYWxhbmNlKVxuICAgICAgfSkpXG4gICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYS5udW1lcmljQmFsYW5jZSA+IGIubnVtZXJpY0JhbGFuY2UgPyAtMSA6IFxuICAgICAgICAgICAgICAgYS5udW1lcmljQmFsYW5jZSA8IGIubnVtZXJpY0JhbGFuY2UgPyAxIDogMDtcbiAgICAgIH0pXG4gICAgICAuc2xpY2UoMCwgbGltaXQpO1xuXG4gICAgY29uc3QgZm9ybWF0dGVkSG9sZGVycyA9IHNvcnRlZEhvbGRlcnMubWFwKGhvbGRlciA9PiB7XG4gICAgICBjb25zdCBwZXJjZW50YWdlID0gTnVtYmVyKChob2xkZXIubnVtZXJpY0JhbGFuY2UgKiBCaWdJbnQoMTAwMDAwMCkgLyB0b3RhbFN1cHBseUJpZ0ludCkpIC8gMTAwMDA7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjY291bnQ6IGhvbGRlci5hY2NvdW50LFxuICAgICAgICBiYWxhbmNlOiBob2xkZXIuYmFsYW5jZSxcbiAgICAgICAgcGVyY2VudGFnZVxuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIExvZyB0b3AgMTAgaG9sZGVycyB3aXRoIGZvcm1hdHRlZCBiYWxhbmNlcyBmb3IgdmVyaWZpY2F0aW9uXG4gICAgY29uc29sZS5sb2coJ1RvcCBob2xkZXJzOicsIGZvcm1hdHRlZEhvbGRlcnMuc2xpY2UoMCwgMTApLm1hcChoID0+ICh7XG4gICAgICBhY2NvdW50OiBoLmFjY291bnQsXG4gICAgICBiYWxhbmNlOiBmb3JtYXRCYWxhbmNlKGguYmFsYW5jZSwgZGVjaW1hbHMpLFxuICAgICAgcGVyY2VudGFnZTogaC5wZXJjZW50YWdlLnRvRml4ZWQoNCkgKyAnJSdcbiAgICB9KSkpO1xuXG4gICAgY29uc3Qgc3RhdHMgPSB7XG4gICAgICB0b3RhbEFjY291bnRzOiBhbGxIb2xkZXJzLmxlbmd0aCArIChuZXh0TGluayA/ICcrJyA6ICcnKSxcbiAgICAgIGFjY291bnRzQWJvdmVPbmU6IGFsbEhvbGRlcnMuZmlsdGVyKGhvbGRlciA9PiBCaWdJbnQoaG9sZGVyLmJhbGFuY2UpID49IG9uZVRva2VuKS5sZW5ndGhcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhvbGRlcnM6IGZvcm1hdHRlZEhvbGRlcnMsXG4gICAgICBzdGF0c1xuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0b2tlbiBob2xkZXJzOicsIHtcbiAgICAgIHN0YXR1czogZXJyb3IucmVzcG9uc2U/LnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IGVycm9yLnJlc3BvbnNlPy5zdGF0dXNUZXh0LFxuICAgICAgZGF0YTogZXJyb3IucmVzcG9uc2U/LmRhdGEsXG4gICAgICB1cmw6IGVycm9yLmNvbmZpZz8udXJsXG4gICAgfSk7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjY291bnRJbmZvKGFjY291bnRJZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYCR7QkFTRV9VUkx9JHtBUElfUEFUSH0vYWNjb3VudHMvJHthY2NvdW50SWR9YCk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhY2NvdW50IGluZm86Jywge1xuICAgICAgc3RhdHVzOiBlcnJvci5yZXNwb25zZT8uc3RhdHVzLFxuICAgICAgc3RhdHVzVGV4dDogZXJyb3IucmVzcG9uc2U/LnN0YXR1c1RleHQsXG4gICAgICBkYXRhOiBlcnJvci5yZXNwb25zZT8uZGF0YSxcbiAgICAgIHVybDogZXJyb3IuY29uZmlnPy51cmxcbiAgICB9KTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IHJhdyBiYWxhbmNlIHdpdGggZGVjaW1hbHNcbmZ1bmN0aW9uIGZvcm1hdEJhbGFuY2UoYmFsYW5jZTogc3RyaW5nLCBkZWNpbWFsczogbnVtYmVyKTogc3RyaW5nIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBiYWxhbmNlQk4gPSBCaWdJbnQoYmFsYW5jZSk7XG4gICAgY29uc3QgZGl2aXNvciA9IEJpZ0ludCgxMCAqKiBkZWNpbWFscyk7XG4gICAgY29uc3Qgd2hvbGVQYXJ0ID0gYmFsYW5jZUJOIC8gZGl2aXNvcjtcbiAgICBjb25zdCBmcmFjdGlvbmFsUGFydCA9IGJhbGFuY2VCTiAlIGRpdmlzb3I7XG4gICAgXG4gICAgbGV0IHJlc3VsdCA9IHdob2xlUGFydC50b1N0cmluZygpO1xuICAgIGlmIChmcmFjdGlvbmFsUGFydCA+IDApIHtcbiAgICAgIGxldCBmcmFjdGlvbmFsU3RyID0gZnJhY3Rpb25hbFBhcnQudG9TdHJpbmcoKS5wYWRTdGFydChkZWNpbWFscywgJzAnKTtcbiAgICAgIC8vIEtlZXAgYWxsIHNpZ25pZmljYW50IGRlY2ltYWwgcGxhY2VzXG4gICAgICB3aGlsZSAoZnJhY3Rpb25hbFN0ci5lbmRzV2l0aCgnMCcpKSB7XG4gICAgICAgIGZyYWN0aW9uYWxTdHIgPSBmcmFjdGlvbmFsU3RyLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICAgIGlmIChmcmFjdGlvbmFsU3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0ICs9ICcuJyArIGZyYWN0aW9uYWxTdHI7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCB0aG91c2FuZCBzZXBhcmF0b3JzXG4gICAgY29uc3QgcGFydHMgPSByZXN1bHQuc3BsaXQoJy4nKTtcbiAgICBwYXJ0c1swXSA9IHBhcnRzWzBdLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csICcsJyk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oJy4nKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmb3JtYXR0aW5nIGJhbGFuY2U6JywgZXJyb3IpO1xuICAgIHJldHVybiBiYWxhbmNlO1xuICB9XG59XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJCQVNFX1VSTCIsIkFQSV9QQVRIIiwiZm9ybWF0VG9rZW5JZCIsInRva2VuSWQiLCJ0cmltIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInRlc3QiLCJnZXRUb2tlbkluZm8iLCJmb3JtYXR0ZWRUb2tlbklkIiwidXJsIiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlIiwiZ2V0IiwiZGF0YSIsImVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImNvbmZpZyIsIkVycm9yIiwibWVzc2FnZSIsImdldFRva2VuSG9sZGVycyIsImxpbWl0IiwiZmlyc3RSZXNwb25zZSIsInRva2VuSW5mbyIsIm5hbWUiLCJzeW1ib2wiLCJkZWNpbWFscyIsInRvdGFsX3N1cHBseSIsImFsbEhvbGRlcnMiLCJuZXh0TGluayIsInBhcmFtcyIsImJhbGFuY2VzIiwiZmlsdGVyIiwiaCIsImJhbGFuY2UiLCJCaWdJbnQiLCJsaW5rcyIsIm5leHQiLCJwYWdlQ291bnQiLCJuZXh0UmVzcG9uc2UiLCJuZXh0VXJsIiwicGFnZUhvbGRlcnMiLCJsZW5ndGgiLCJOdW1iZXIiLCJvbmVUb2tlbiIsInRvdGFsU3VwcGx5QmlnSW50Iiwic29ydGVkSG9sZGVycyIsIm1hcCIsImhvbGRlciIsIm51bWVyaWNCYWxhbmNlIiwic29ydCIsImEiLCJiIiwic2xpY2UiLCJmb3JtYXR0ZWRIb2xkZXJzIiwicGVyY2VudGFnZSIsImFjY291bnQiLCJmb3JtYXRCYWxhbmNlIiwidG9GaXhlZCIsInN0YXRzIiwidG90YWxBY2NvdW50cyIsImFjY291bnRzQWJvdmVPbmUiLCJob2xkZXJzIiwiZ2V0QWNjb3VudEluZm8iLCJhY2NvdW50SWQiLCJiYWxhbmNlQk4iLCJkaXZpc29yIiwid2hvbGVQYXJ0IiwiZnJhY3Rpb25hbFBhcnQiLCJyZXN1bHQiLCJ0b1N0cmluZyIsImZyYWN0aW9uYWxTdHIiLCJwYWRTdGFydCIsImVuZHNXaXRoIiwicGFydHMiLCJzcGxpdCIsInJlcGxhY2UiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/hedera.ts\n"));

/***/ })

});